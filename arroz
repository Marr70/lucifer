--egg benedict flags 32768
bot = getBot()
locks = {242,9640,202,204,206,1796,4994,7188,408,2950,4428, 4802 ,5814,5260,5980,8470,10410,11550,11586}
cooked = 0
midX = 0
midY = 0
disc = false

strg, strg_id = storage:match("([^:]+)|([^:]+)")
world_oven, door_oven = Bots[getBot().name:upper()].oven:match("([^:]+)|([^:]+)")
level_limit = Bots[getBot().name:upper()].level_limit
delay_cook = Bots[getBot().name:upper()].delay_cook
oven_amount = Bots[getBot().name:upper()].oven_amount
mode = Bots[getBot().name:upper()].mode

if delay_cook < 200 then
    delay_cook = 200
end

recipes = {}
if mode:lower() == "arroz" then
    cooked = 4604
    recipes[1] = {id = 3472, time = 0}
    recipes[2] = {id = {4602,4588}, time = 33.7}
    recipes[3] = {id = 962, time = 70}
    recipes[4] = {id = 18, time = 100}
elseif mode:lower() == "berry" then
    cooked = 4596
    recipes[1] = {id = 4562, time = 0}
    recipes[2] = {id = 874, time = 16}
    recipes[3] = {id = 868, time = 42.7}
    recipes[4] = {id = 196, time = 56}
    recipes[5] = {id = 18, time = 76}
end

goods = {}
leveling_items = {}
for _,rcp in pairs(recipes) do
    if type(rcp.id) == "table" then
        for _,itm in pairs(rcp.id) do
            if itm ~= 18 then
                table.insert(goods, itm)
            end
        end
    else
        if rcp.id ~= 18 then
            table.insert(goods, rcp.id)
        end
    end
end
if use_hat then
    table.insert(goods, 11638)
    table.insert(leveling_items, 11638)
end
if use_hand then
    table.insert(goods, 7752)
    table.insert(leveling_items, 7752)
end
if use_food_buff then
    table.insert(goods, 1474)
    table.insert(leveling_items, 1474)
end

function create_matrix(number)
    local matrix = {}
    local centerx = (math.sqrt(number) + 1) / 2
    local centery = (math.sqrt(number) + 1) / 2
    for i = 1, math.sqrt(number) do
        matrix[i] = {}
        for j = 1,math.sqrt(number) do
            matrix[i][j] = {i - centerx,j - centery}
        end
    end
    return matrix
end

function check_oven(number)
    local oven_space = create_matrix(number)
    local sekip = false
    local count = 0
    local batch = 0
    local bl_tile = {}
    local oven_table = {}

    for i = 1, math.sqrt(number) do
        for j = 1, math.sqrt(number) do
            local coord = oven_space[i][j]
            table.insert(oven_table, {x = coord[2], y = coord[1]})
        end
    end

    for _,tile in pairs(bot:getWorld():getTiles()) do
        for _,data in pairs(oven_table) do
            if bot:getWorld():getTile(tile.x + data.x, tile.y + data.y).fg ~= 4618 then
                count = 0
                break
            end
            if bot:getWorld():getTile(tile.x + data.x, tile.y + data.y).fg == 4618 then
                if data.x == 0 and data.y == 0 then
                    count = count + 1
                else
                    if not bl_tile[string.format("%i,%i", tile.x + data.x, tile.y + data.y)] then
                        bl_tile[string.format("%i,%i", tile.x + data.x, tile.y + data.y)] = true
                        count = count + 1
                    else
                        count = 0
                        break
                    end
                end
            end
        end
        if count == number then
            batch = batch + 1
            if batch == script_id then
                midX = tile.x
                midY = tile.y
                if not bot:isInTile(midX, midY) and #bot:getPath(midX, midY) > 0 then
                    bot:findPath(midX, midY)
                    sleep(1000)
                    reconnect(world_oven, door_oven, midX, midY)
                end
                if debugging then
                    print(string.format("[%s] (%i,%i) is the center\n", bot.name, tile.x , tile.y))
                end
                return
            end
        end
    end
    bot:stopScript()
    print(string.format("[%s] There are not enough oven to start cooking (script stopped)\n", bot.name))
end

function check_ingredient_count(number)
    local oven_space = create_matrix(number)
    local oven_table = {}

    for i = 1, math.sqrt(number) do
        for j = 1, math.sqrt(number) do
            local coord = oven_space[i][j]
            table.insert(oven_table, {x = coord[2], y = coord[1]})
        end
    end

    for nomoroven,data in ipairs(oven_table) do
        while bot:getWorld():getTile(bot.x+data.x,bot.y+data.y):getExtra().ingredient_count ~= 0 do
            for i = 1,8 do
                bot:hit(bot.x+data.x,bot.y+data.y)
                sleep(800 + bot:getPing())
                reconnect(world_oven, door_oven, midX, midY)
                if bot:getWorld():getTile(bot.x+data.x,bot.y+data.y):getExtra().ingredient_count == 0 then
                    break
                end
            end
            if bot:getWorld():getTile(bot.x+data.x,bot.y+data.y):getExtra().ingredient_count == 0 then
                break
            else
                sleep(4000)
            end
        end
    end
end

function send_cook(x, y, id)
    while bot:getWorld():getTile(x,y):getExtra().ingredient_count == 0 do
        bot:place(x,y, id)
        if (delay_cook + bot:getPing()) > 600 then
            sleep(600)
        else
            sleep(delay_cook + bot:getPing())
        end
        reconnect(world_oven, door_oven, midX, midY)
        if disc then return end
        if bot:getWorld():getTile(x,y):getExtra().ingredient_count == 0 then
            bot:sendPacket(2, "action|dialog_return\ndialog_name|oven\ntilex|"..x.."|\ntiley|"..y.."|\ncookthis|"..id.."|\nbuttonClicked|low\n\ndisplay_timer|0")
        end
        if (delay_cook + bot:getPing()) > 600 then
            sleep(600)
        else
            sleep(delay_cook + bot:getPing())
        end
        reconnect(world_oven, door_oven, midX, midY)
        if disc then return end
    end
end

function cook(number)
    local oven_space = create_matrix(number)
    local oven_table = {}
    local elapsed_time = {}

    for i = 1, math.sqrt(number) do
        for j = 1, math.sqrt(number) do
            local coord = oven_space[i][j]
            table.insert(oven_table, {x = coord[2], y = coord[1]})
        end
    end

    for index,bahan in pairs(recipes) do
        if index == 1 then
            for nomoroven,data in ipairs(oven_table) do
                if type(bahan.id) == "table" then
                    for num,item in pairs(bahan.id) do
                        if num == 1 then
                            send_cook(bot.x+data.x, bot.y+data.y, item)
                            elapsed_time[nomoroven] = os.time()
                            if disc then return end
                        else
                            bot:place(bot.x+data.x, bot.y+data.y, item)
                            if debugging then
                                print(string.format("put %s at %i second (oven number %i)", getInfo(item).name, (os.time()-elapsed_time[nomoroven]), nomoroven))
                            end
                        end
                        sleep((delay_cook/2) + bot:getPing())
                        reconnect(world_oven, door_oven, midX, midY)
                        if disc then return end
                    end
                    sleep((delay_cook/2) + bot:getPing())
                else
                    send_cook(bot.x+data.x, bot.y+data.y, recipes[index].id)
                    elapsed_time[nomoroven] = os.time()
                    if disc then return end
                end
            end
        else
            for nomoroven,data in ipairs(oven_table) do
                if (os.time()-elapsed_time[nomoroven]) < recipes[index].time then
                    while (os.time()-elapsed_time[nomoroven]) < recipes[index].time do
                        sleep(50)
                    end
                end
                if type(bahan.id) == "table" then
                    for _,item in pairs(bahan.id) do
                        while bot:getWorld():getTile(bot.x+data.x, bot.y+data.y):getExtra().ingredient_count == (index-1) do
                            bot:place(bot.x+data.x, bot.y+data.y, item)
                            if debugging then
                                if bot:getWorld():getTile(bot.x+data.x, bot.y+data.y):getExtra().ingredient_count == index then
                                    print(string.format("put %s at %i second (oven number %i)", getInfo(item).name, (os.time()-elapsed_time[nomoroven]), nomoroven))
                                end
                            end
                            sleep((delay_cook/2) + bot:getPing())
                            reconnect(world_oven, door_oven, midX, midY)
                            if disc then return end
                        end
                    end
                    sleep((delay_cook/2) + bot:getPing())
                elseif bahan.id == 18 then
                    while bot:getWorld():getTile(bot.x+data.x, bot.y+data.y):getExtra().ingredient_count ~= 0 do
                        bot:hit(bot.x+data.x, bot.y+data.y)
                        if debugging then
                            if bot:getWorld():getTile(bot.x+data.x, bot.y+data.y):getExtra().ingredient_count == 0 then
                                print(string.format("punch at %i second (oven number %i)", (os.time()-elapsed_time[nomoroven]), nomoroven))
                            end
                        end
                        sleep(delay_cook + bot:getPing())
                        reconnect(world_oven, door_oven, midX, midY)
                        if disc then return end
                    end
                else
                    while bot:getWorld():getTile(bot.x+data.x, bot.y+data.y):getExtra().ingredient_count == (index-1) do
                        bot:place(bot.x+data.x, bot.y+data.y, bahan.id)
                        if debugging then
                            if bot:getWorld():getTile(bot.x+data.x, bot.y+data.y):getExtra().ingredient_count == index then
                                print(string.format("put %s at %i second (oven number %i)", getInfo(bahan.id).name, (os.time()-elapsed_time[nomoroven]), nomoroven))
                            end
                        end
                        sleep(delay_cook + bot:getPing())
                        reconnect(world_oven, door_oven, midX, midY)
                        if disc then return end
                    end
                end
            end
        end
    end
end

function warp(to, id)
    while bot:getWorld().name:upper() ~= to:upper() do
        if id and id ~= "" then
            bot:warp(to, id)
        else
            bot:warp(to)
        end
        sleep(6000)
        reconnect()
    end
    if id == "" or id == nil then
        return
    end
    while bot:getWorld():getTile(bot.x, bot.y).fg == 6 do
        bot:warp(to, id)
        sleep(6000)
        reconnect()
    end
end

function round(n)
    return n % 1 > 0.5 and math.ceil(n) or math.floor(n)
end

function isInRadius(x, y, range)
    return bot.x <= (x+range) and bot.y <= (y+range)
end

function collect(range, id)
    for _,obj in pairs(bot:getWorld():getObjects()) do
        if id ~= nil and id ~= 0 and obj.id == id then
            if isInRadius(round(obj.x/32), obj.y//32, range) then
                bot:collectObject(obj.oid, range)
                break
            end
        end
    end
end

function take(id)
    if contains(leveling_items, id) then
        while bot:getInventory():findItem(id) == 0 do
            for _,obj in pairs(bot:getWorld():getObjects()) do
                if obj.id == id then
                    if not bot:isInTile(round(obj.x/32), obj.y//32) and #bot:getPath(round(obj.x/32), obj.y//32) > 0 then
                        bot:findPath(round(obj.x/32), obj.y//32)
                        sleep(1000)
                        reconnect(strg, strg_id, round(obj.x/32), obj.y//32)
                    end
                    collect(2, obj.id)
                    sleep(500)
                    reconnect(strg, strg_id, round(obj.x/32), obj.y//32)
                end
                if bot:getInventory():findItem(id) > 0 then
                    break
                end
            end
        end
    else
        while bot:getInventory():findItem(id) < oven_amount do
            for _,obj in pairs(bot:getWorld():getObjects()) do
                if obj.id == id then
                    if not bot:isInTile(round(obj.x/32), obj.y//32) and #bot:getPath(round(obj.x/32), obj.y//32) > 0 then
                        bot:findPath(round(obj.x/32), obj.y//32)
                        sleep(1000)
                        reconnect(strg, strg_id, round(obj.x/32), obj.y//32)
                    end
                    collect(2, obj.id)
                    sleep(500)
                    reconnect(strg, strg_id, round(obj.x/32), obj.y//32)
                end
                if bot:getInventory():findItem(id) >= oven_amount then
                    break
                end
            end
        end
    end
end

function can_drop(x,y,ids,value)
    local store = {}
    local stack = {}

    for _,obj in pairs(bot:getWorld():getObjects()) do
        if round(obj.x/32) == x and obj.y//32 == y then
            store[obj.id] = (store[obj.id] or 0) + obj.count
            stack[obj.id] = true
        end
    end

    local function count_stack()
        local count = 0 

        for _ in pairs(stack) do
            count = count + 1
        end
        return count
    end

    local function count_store()
        local count = 0

        for _,cout in pairs(store) do
            count = count + cout
        end

        return count
    end

    local function check_waste()
        local cout = 0 

        for id, count in pairs(store) do
            if count % 200 ~= 0 then
                cout = cout + (200 - (count % 200))
            end
        end

        return cout
    end

    local function check_store(ids)
        for key, _ in pairs(store) do
            if key == ids then
                return true
            end
        end
        return false
    end

    if (count_store()+value) <= 4000 then
        if check_store(ids) then
            if (store[ids] % 200) ~= 0 and ((store[ids] % 200) + value) <= 200 then
                return true
            else
                if (check_waste() + count_store()) < 4000 then
                    if count_stack() < 20 then
                        return true
                    end
                else
                    return false
                end
            end
        else
            if (check_waste() + count_store()) < 4000 then
                if count_stack() < 20 then
                    return true
                end
            else
                return false
            end

        end
    end
    return false
end

function drop(id, sisa, xawal)
    if id == cooked then
        for _,tile in pairs(bot:getWorld():getTiles()) do
            if tile.fg == pos_arroz then
                if can_drop(tile.x, tile.y, id, bot:getInventory():findItem(id)-sisa) then
                    if not bot:isInTile(tile.x-1, tile.y) and #bot:getPath(tile.x-1, tile.y) > 0 then
                        bot:findPath(tile.x-1, tile.y)
                        sleep(1000)
                        reconnect(strg, strg_id, tile.x-1, tile.y)
                    end
                    bot:setDirection(false)
                    sleep(500)
                    while bot:getInventory():findItem(id) > sisa and can_drop(tile.x,tile.y,id, bot:getInventory():findItem(id) - sisa) do
                        bot:drop(id, bot:getInventory():findItem(id)-sisa)
                        sleep(3000)
                        reconnect(strg, strg_id, tile.x-1, tile.y)
                    end
                end
                if bot:getInventory():findItem(id) == sisa then
                    break
                end
            end
        end
    else
        for _,tile in pairs(bot:getWorld():getTiles()) do
            if tile.fg == pos_drop then
                if tile.x ~= xawal then
                    if can_drop(tile.x, tile.y, id, bot:getInventory():findItem(id)-sisa) then
                        if not bot:isInTile(tile.x-1, tile.y) and #bot:getPath(tile.x-1, tile.y) > 0 then
                            bot:findPath(tile.x-1, tile.y)
                            sleep(1000)
                            reconnect(strg, strg_id, tile.x-1, tile.y)
                        end
                        bot:setDirection(false)
                        sleep(500)
                        while bot:getInventory():findItem(id) > sisa and can_drop(tile.x,tile.y,id, bot:getInventory():findItem(id) - sisa) do
                            bot:drop(id, bot:getInventory():findItem(id)-sisa)
                            sleep(3000)
                            reconnect(strg, strg_id, tile.x-1, tile.y)
                        end
                    end
                    if bot:getInventory():findItem(id) == sisa then
                        break
                    end
                end
            end
        end
    end
end

function random_name(length)
    while true do
        jelek = false
        local bad_name = {'fuc','fck','uck','vck','fuk','fug','fag','bob','dick','dck','b0b','sex','s3x','gay','g4y','bitch','dick','d1ck'}
        local letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        local name = ""
        for i = 1, length do
            local index = math.random(#letters)
            name = name .. string.sub(letters, index, index)
        end
        for _,bn in pairs(bad_name) do
            if name:upper():find(bn:upper()) then
                jelek = true
            end
        end
        if not jelek then 
            return name
        end
    end
end

function sekip()
    while bot:getInventory():findItem(9640) > 0 do
        locked = false
        sleep(1000)
        local wurld = random_name(10)
        bot:warp(wurld)
        sleep(7000)
        for _,tile in pairs(bot:getWorld():getTiles()) do
            for _,i in pairs(locks) do
                if tile.fg == i then
                    sleep(200)
                    locked = true
                    break
                end
            end
            if locked then break end
        end
        if not locked then 
            bot:place(bot.x,bot.y-1,9640)
            sleep(1000)
            reconnect(wurld, nil)
        end
    end
end

function contains(table, value)
    for i, element in pairs(table) do
        if element == value then
            return true
        end
    end
    return false
end

function is_valid()
    local valid_status_list = {BotStatus.offline, BotStatus.online, BotStatus.version_update, BotStatus.server_overload, BotStatus.server_busy, BotStatus.too_many_login, BotStatus.error_connecting, BotStatus.logon_fail, BotStatus.changing_subserver, BotStatus.high_ping, BotStatus.high_load}
    return contains(valid_status_list, bot.status)
end

function reconnect(world, id, x, y)
    if bot.status ~= BotStatus.online or not bot:isInWorld() then
        bot.auto_reconnect = true
        while true do
            while bot.status ~= BotStatus.online do
                sleep(3000)
                if not is_valid() then
                    while not is_valid() do
                        sleep(3000)
                    end
                end
            end

            if world then
                if id and id ~= "" then
                    warp(world,id)
                    sleep(500)
                else
                    warp(world)
                    sleep(500)
                end
            end

            if x and y then
                if bot:isInWorld() and bot:getWorld():getTile(bot.x, bot.y).fg ~= 6 then
                    if not bot:isInTile(x,y) and #bot:getPath(x,y) > 0 then
                        bot:findPath(x, y)
                        sleep(1000)
                    end
                end
            end

            if bot.status == BotStatus.online then
                disc = true
                break
            end
        end
    end
end

function main_normal()
    while bot.level < level_limit do
        disc = false
        if bot:getInventory():findItem(cooked) >= limit_drop_item then
            warp(strg, strg_id)
            sleep(200)
            drop(cooked, 0)
            sleep(200)
        end

        for _,item in pairs(goods) do
            if contains(leveling_items, item) then
                if bot:getInventory():findItem(item) == 0 then
                    if item == 1474 then
                        local playermod
                        for _,player in pairs(bot:getWorld():getPlayers()) do
                            if player.name:upper():find(string.format("%s", bot.name:upper())) then
                                playermod = player.avatarFlags
                            end
                        end
                        if playermod ~= 32768 then
                            warp(strg, strg_id)
                            sleep(200)
                            take(item)
                            if bot:getInventory():getItemCount(item) > 1 then
                                local awalx = bot.x
                                drop(item, 1, awalx)
                                sleep(500)
                            end
                            sleep(1000)
                            bot:use(1474)
                            sleep(1000)
                        end
                    else
                        warp(strg, strg_id)
                        sleep(200)
                        take(item)
                        if bot:getInventory():getItemCount(item) > 1 then
                            local awalx = bot.x
                            drop(item, 1, awalx)
                            sleep(500)
                        end
                        sleep(1000)
                        while not bot:getInventory():getItem(item).isActive and bot:getInventory():getItemCount(item) >= 1 do
                            bot:wear(item)
                            sleep(2000)
                        end
                    end
                end
            else
                if bot:getInventory():findItem(item) < oven_amount then
                    warp(strg, strg_id)
                    sleep(200)
                    take(item)
                    if bot:getInventory():getItemCount(item) > limit_take_item then
                        local awalx = bot.x
                        drop(item, limit_take_item, awalx)
                        sleep(200)
                    end
                end
            end
        end

        if not bot:isInWorld(world_oven) then
            warp(world_oven, door_oven)
            sleep(200)
        end

        check_oven(oven_amount)
        sleep(1000)
        check_ingredient_count(oven_amount)
        sleep(1000)
        cook(oven_amount)
        sleep(2000)
    end

    for _,utem in pairs(goods) do
        if bot:getInventory():findItem(utem) > 0 then
            warp(strg, strg_id)
            sleep(200)
            drop(utem, 0)
            sleep(200)
        end
    end

    if bot:getInventory():findItem(cooked) > 0 then
        warp(strg, strg_id)
        sleep(200)
        drop(cooked, 0)
        sleep(200)
    end
end

bot.auto_collect = false
main_normal()
