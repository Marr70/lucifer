bot = getBot()
stock_value = 0
gacukup = false
world_save, id_door_save = save:match("([^|]+)|([^|]+)")
store = {}

for _,data in pairs(list_item) do
    if data:match("([^|]+)|([^|]+)|([^|]+)") then
        local world,item,price = data:match("([^|]+)|([^|]+)|([^|]+)")
        table.insert(store, {world = world, id = tonumber(item), price = tonumber(price)})
    end
end

function sendWH(message)
    wh = Webhook.new(webhook_url)
    wh.embed1.use = true
    wh.embed1.color = 0x2bb52f
    wh.embed1.title = "Lucifer Autobuy Logs"
    wh.embed1.description = message
    wh:send()
end

function checkwl()
    return (bot:getInventory():findItem(1796) * 100) + bot:getInventory():findItem(242)
end

function vbuy(x,y,price,id)
    local inventory = bot:getInventory():findItem(id)
    local totalwl = checkwl()
    local count = 0
    if price < 0 then
        if stock_value < (200-inventory) then
            local totalprice = math.floor(stock_value / math.abs(price))
            if totalprice > totalwl then
                totalprice = totalwl
            end
            count = (totalprice * math.abs(price))
            if count == 0 then
                stock_value = 0
                gacukup = true
                return
            end
            print(totalwl)
            print(count)
            print(totalprice)
        else
            local totalprice = math.floor((200 - inventory) / math.abs(price))
            if totalprice > totalwl then
                totalprice = totalwl
            end
            count = (totalprice * math.abs(price))
            if count == 0 then
                stock_value = 0
                gacukup = true
                return
            end
            print(totalwl)
            print(count)
            print(totalprice)
        end
    elseif price > 0 then
        if stock_value < (200-inventory) then
            local totalprice = (stock_value * price)
            count = stock_value
            if totalprice > totalwl then
                count = math.floor(totalwl/price)
                totalprice = count * price
            end
            if count == 0 then
                stock_value = 0
                gacukup = true
                return
            end
            print(totalwl)
            print(count)
            print(totalprice)
        else
            local totalprice = ((200 - inventory) * price)
            count = (200 - inventory)
            if totalprice > totalwl then
                count = math.floor(totalwl/price)
                totalprice = count * price
            end
            if count == 0 then
                stock_value = 0
                gacukup = true
                return
            end
            print(totalwl)
            print(count)
            print(totalprice)
        end
    end
    sleep(500)
    bot:sendPacket(2, "action|dialog_return\ndialog_name|vending\ntilex|"..x.."|\ntiley|"..y.."|\nexpectprice|"..price.."|\nexpectitem|"..id.."|\nbuycount|"..count)
    sleep(500)
    bot:sendPacket(2, "action|dialog_return\ndialog_name|vending\ntilex|"..x.."|\ntiley|"..y.."|\nverify|1|\nbuycount|"..count.."|\nexpectprice|"..price.."|\nexpectitem|"..id.."|")
    sleep(500)
    stock_value = 0
end

function warp(to, id)
    while bot:getWorld().name:upper() ~= to:upper() do
        bot:sendPacket(3,"action|join_request\nname|"..to:upper().."\ninvitedWorld|0")
        sleep(5000)
    end
    if id == "" or id == nil then
        return
    end
    while bot:getWorld():getTile(math.floor(getLocal().posx/32), math.floor(getLocal().posy/32)).fg == 6 do
        bot:sendPacket(3,"action|join_request\nname|"..to:upper().."|"..id:upper().."\ninvitedWorld|0")
        sleep(5000)
    end
end

function hook(var, netid)
    if var:get(0):getString() == "OnDialogRequest" then
        if var:get(1):getString():find("The machine contains") then
            stock_value = var:get(1):getString():match("a total of (%d+)")
            stock_value = tonumber(stock_value)
        end
    end
end

function checkvends(world)
    for _,data in pairs(store) do
        if data.world == world then
            for _,tile in pairs(bot:getWorld():getTiles()) do
                if tile.fg == 2978 or tile.fg == 9268 then
                    if tile:getExtra().id == data.id then
                        if tile:getExtra().item_price <= data.price then
                            return true
                        end
                    end
                end
            end
            return false
        end
    end
    return false
end

function process_buy_item()
    if #store == 0 then
        sendWH("All vend worlds are out of stock (script stopped) \n@here")
        sleep(1000)
        bot:warp("EXIT")
        sleep(3000)
        bot:stopScript()
    end

    for index,data in pairs(store) do
        sleep(1000)
        warp(data.world)
        sleep(500)
        if not checkvends(data.world) then
            sendWH(string.format("World %s runs out of %s, world will be removed from list \n@here", data.world:upper(), getInfo(data.id).name))
            table.remove(store, index)
            break
        end

        for _,tile in pairs(bot:getWorld():getTiles()) do
            if (tile.fg == 2978 or tile.fg == 9268) and tile:getExtra().id == data.id then
                if data.price < 0 then
                    if bot:getInventory():findItem(data.id) + math.abs(data.price) > 200 then
                        break
                    end
                elseif data.price > 0 then
                    if bot:getInventory():findItem(data.id) == 200 then
                        break
                    end
                end

                if checkwl() < data.price or checkwl() == 0 or gacukup then
                    gacukup = false
                    waitforwl(data.id, data.price, data.world)
                end

                if tile:getExtra().item_price <= data.price then
                    if not bot:isInTile(tile.x, tile.y) and #bot:getPath(tile.x, tile.y) > 0 then
                        bot:findPath(tile.x, tile.y)
                        sleep(1500)
                    end
                    while stock_value == 0 do
                        bot:wrench(bot.x,bot.y)
                        listenEvents(2)
                        sleep(500)
                    end
                    vbuy(tile.x, tile.y, tile:getExtra().item_price, data.id)
                    sleep(1000)
                end
                checkgoods()
            end
        end
    end
end

function getpos()
    local pos = {
        x = math.floor(getLocal().posx/32),
        y = math.floor(getLocal().posy/32)
    }
    return pos
end

function can_drop(x,y,ids,value)
    local store = {}
    local stack = {}

    for _,obj in pairs(bot:getWorld():getObjects()) do
        if round(obj.x/32) == x and obj.y//32 == y then
            store[obj.id] = (store[obj.id] or 0) + obj.count
            stack[obj.id] = true
        end
    end

    local function count_stack()
        local count = 0 

        for _ in pairs(stack) do
            count = count + 1
        end
        return count
    end

    local function count_store()
        local count = 0

        for _,cout in pairs(store) do
            count = count + cout
        end

        return count
    end

    local function check_waste()
        local cout = 0 

        for id, count in pairs(store) do
            if count % 200 ~= 0 then
                cout = cout + (200 - (count % 200))
            end
        end

        return cout
    end

    local function check_store(ids)
        for key, _ in pairs(store) do
            if key == ids then
                return true
            end
        end
        return false
    end

    if (count_store()+value) <= 4000 then
        if check_store(ids) then
            if (store[ids] % 200) ~= 0 and ((store[ids] % 200) + value) <= 200 then
                return true
            else
                if (check_waste() + count_store()) < 4000 then
                    if count_stack() < 20 then
                        return true
                    end
                else
                    return false
                end
            end
        else
            if (check_waste() + count_store()) < 4000 then
                if count_stack() < 20 then
                    return true
                end
            else
                return false
            end

        end
    end
    return false
end

function dropss(sisa)
    for _,data in pairs(store) do
        for _,tile in pairs(bot:getWorld():getTiles()) do
            if tile.fg == pos_drop then
                if can_drop(tile.x, tile.y, data.id, bot:getInventory():findItem(data.id)-sisa) then
                    if not bot:isInTile(tile.x-1, tile.y) and #bot:getPath(tile.x-1, tile.y) > 0 then
                        bot:findPath(tile.x-1, tile.y)
                        sleep(1000)
                    end
                    bot:setDirection(false)
                    sleep(500)
                    while bot:getInventory():findItem(data.id) > sisa and can_drop(tile.x,tile.y,data.id, bot:getInventory():findItem(data.id) - sisa) do
                        bot:drop(data.id, bot:getInventory():findItem(data.id)-sisa)
                        sleep(3000)
                    end
                end
            end
            if bot:getInventory():findItem(data.id) == sisa then
                break
            end
        end
    end
end

function checkgoods()
    for _,data in pairs(store) do
        if bot:getInventory():findItem(data.id) > 0 then
            warp(world_save, id_door_save)
            sleep(500)
            dropss(0)
            break
        end
    end
end

function round(n)
    return n % 1 > 0.5 and math.ceil(n) or math.floor(n)
end

function waitforwl(ids, price, world)
    warp(world_save, id_door_save)
    sleep(500)
    local wlsaatini = checkwl()
    if price < 0 then
        sendWH(string.format("Bot trying to buy %s for %i/1, but only have %i world lock in backpack, bot will wait in %s \n@here", getInfo(ids).name, math.abs(price), wlsaatini, bot:getWorld().name:upper()))
    else
        sendWH(string.format("Bot trying to buy %s for %i world lock, but only have %i world lock in backpack, bot will wait in %s \n@here", getInfo(ids).name, math.abs(price), wlsaatini, bot:getWorld().name:upper()))
    end
    sleep(1000)

    while checkwl() == wlsaatini do
        for _,obj in pairs(bot:getWorld():getObjects()) do
            if obj.id == 1796 or obj.id == 242 then
                if not bot:isInTile(round(obj.x/32), obj.y//32) then
                    bot:findPath(round(obj.x/32), math.floor(obj.y/32))
                    sleep(1000)
                end
                bot:collectObject(obj.oid, 2)
                sleep(500)
                break
            end
        end
    end

    sleep(500)
    warp(world)
    sleep(500)
end

function main()
    while true do
        process_buy_item()
    end
end

addEvent(Event.variantlist, hook)
main()
